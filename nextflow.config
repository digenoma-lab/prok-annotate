params {
    /* Input and output options */
    genomes = "data/*.fa"             // input contigs or genomes in FASTA format
    outdir = "./results"              // output directory
    
    /* Prokka options */
    prokka_kingdom = "Bacteria"       // Archaea, Bacteria, Mitochondria, Viruses
    prokka_metagenome = false         // Improve gene predictions for highly fragmented genomes

    /* eggNOG options */
    run_eggnog = false                // run eggNOG (database required)
    eggnog_db = "eggnog_db"           // eggNOG database (v5.0 required)

    /* KofamScan options */
    run_kofamscan = false             // run KofamScan (database required)
    kofamscan_profile = "profile"     // Kofam profile, can be a directory, .hmm file, or a .hal file.
                                      // See https://github.com/takaram/kofam_scan/tree/v1.3.0#profiles.
    kofamscan_ko_list = "ko_list"     // Kofam KO list file 

    /* Limits */
    max_cpus = 4
    max_memory = 32.GB
    max_time = 48.h
}


/* Docker options */
docker.enabled = true
docker.runOptions = '-u \$(id -u):\$(id -g)'


/* Import process configuration file*/
includeConfig 'process.config'


/* Manifest */
manifest {
    homePage = 'metashot.github.io'
    description = 'Annotation pipeline for prokaryotic contigs/genomes'
    mainScript = 'main.nf'
    version = '2.0.0'
}


/* Functions */
def check_max(obj, max) {
    // see https://github.com/nextflow-io/nextflow/issues/640
    if( obj instanceof nextflow.util.MemoryUnit ) {
        try {
            def max_type = max as nextflow.util.MemoryUnit
            return obj.compareTo(max_type) == 1 ? max_type : obj
        }   
        catch( all ) {
            println "ERROR: invalid max memory '${max}', using default value: $obj"
            return obj
        }   
    }
    if( obj instanceof nextflow.util.Duration ) {
        try {
            def max_type = max as nextflow.util.Duration
            return obj.compareTo(max_type) == 1 ? max_type : obj
        }   
        catch( all ) {
            println "ERROR: invalid max time '${max}', using default value $obj"
            return obj
        }         
    }
    if( obj instanceof Integer ) {
        try {
            return Math.min(obj, max as int)
        }   
        catch( all ) {
            println "ERROR: invalid max cpus '${max}', using default value $obj"
            return obj
        }         
    }    
}
